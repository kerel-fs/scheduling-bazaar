{"type":"settings","kernel":"anaconda3","backend_state":"running","trust":true,"kernel_state":"idle"}
{"type":"file","last_load":1497291338050}
{"exec_count":97,"start":1497457166439,"input":"# DO ANY PASSES OVERLAP","state":"done","pos":0,"type":"cell","end":1497457166472,"id":"6428aa","kernel":"anaconda3"}
{"exec_count":98,"input":"# Import necessary libraries\nimport ephem\nimport math\nfrom datetime import timedelta\nfrom datetime import datetime\n\n\n# get_passes() function definition\ndef get_passes(observer, tle, start_time, num_passes=None, duration=None):\n    \"\"\"Config obs and sat, Return pass data for all passes in given interval.\n\n    Arguments:\n    observer -- 4 element list containing desired [name,lat,lon,alt]\n    tle -- 3 element list containing desired tle [line0,line1,line2]\n    start_time -- ephem.date string formatted 'yyyy/mm/dd hr:min:sec'\n    num_passes -- integer number of desired passes (defualt None)\n    duration -- float number of hours or fraction of hours (default None)\n\n    Specify either num_passes or duration.\n    If both, use num_passes.\n    If neither, find passes for next 24 hours.\n    \"\"\"\n\n    obs_name, obs_lat, obs_lon, obs_alt = observer\n    tle_line0, tle_line1, tle_line2 = tle\n\n    # Set up location of observer\n    ground_station = ephem.Observer()\n    ground_station.name = obs_name                # name string\n    ground_station.lon = obs_lon                  # in degrees (+E)\n    ground_station.lat = obs_lat                  # in degrees (+N)\n    ground_station.elevation = obs_alt            # in meters\n    ground_station.date = ephem.date(start_time)  # in UTC\n\n    # Read in most recent satellite TLE data\n    sat = ephem.readtle(tle_line0, tle_line1, tle_line2)\n\n    contacts = []\n\n    if num_passes is not None and duration is None:\n        # if only num_passes specified\n        try:\n            for i in range(num_passes):\n                sat.compute(ground_station)  # compute all body attributes for sat\n                # next pass command yields array with [0]=rise time,\n                # [1]=rise azimuth, [2]=max alt time, [3]=max alt,\n                # [4]=set time, [5]=set azimuth\n                info = ground_station.next_pass(sat)\n                rise_time, rise_az, max_alt_time, max_alt, set_time, set_az = info\n                deg_per_rad = 180.0/math.pi           # use to conv azimuth to deg\n                pass_duration = timedelta(days = set_time-rise_time)  # fraction of a day\n\n                if set_time > rise_time:  # only update if set time > rise time\n                    ground_station.date = set_time  # new obs time = prev set time\n\n                pass_data = {\n                    'start' : rise_time.datetime().ctime(),\n                    'end' : set_time.datetime().ctime(),\n                    'duration' : str(pass_duration),\n                    'rise_az' : (rise_az*deg_per_rad),\n                    'set_az' : (set_az*deg_per_rad)\n                }\n\n                # increase by 1 min and look for next pass\n                ground_station.date = ground_station.date + ephem.minute\n                contacts.append(pass_data)\n        except ValueError:\n            # No (more) visible passes\n            pass\n        return contacts\n\n    if num_passes is None and duration is not None:\n        # if only duration specified\n        try:\n            end_time = ephem.date(ground_station.date+duration*ephem.hour)\n            while (ground_station.date <= end_time):\n                sat.compute(ground_station)  # compute all body attributes for sat\n                # next pass command yields array with [0]=rise time,\n                # [1]=rise azimuth, [2]=max alt time, [3]=max alt,\n                # [4]=set time, [5]=set azimuth\n                info = ground_station.next_pass(sat)\n                rise_time, rise_az, max_alt_time, max_alt, set_time, set_az = info\n                deg_per_rad = 180.0/math.pi           # use to conv azimuth to deg\n                pass_duration = timedelta(set_time-rise_time)  # fraction of a day\n\n                if set_time > rise_time:  # only update if set time > rise time\n                    ground_station.date = set_time  # new obs time = prev set time\n\n                pass_data = {\n                    'start' : rise_time.datetime().ctime(),\n                    'end' : set_time.datetime().ctime(),\n                    'duration' : str(pass_duration),\n                    'rise_az' : (rise_az*deg_per_rad),\n                    'set_az' : (set_az*deg_per_rad)\n                }\n\n                # increase time by 1 min and look for next pass\n                ground_station.date = ground_station.date + ephem.minute\n                contacts.append(pass_data)\n        except ValueError:\n            # No (more) visible passes\n            pass\n        return contacts\n\n    if num_passes is not None and duration is not None:\n        # if both are specified, use num_passes\n        try:\n            for i in range(num_passes):\n                sat.compute(ground_station)  # compute all body attributes for sat\n                # next pass command yields array with [0]=rise time,\n                # [1]=rise azimuth, [2]=max alt time, [3]=max alt,\n                # [4]=set time, [5]=set azimuth\n                info = ground_station.next_pass(sat)\n                rise_time, rise_az, max_alt_time, max_alt, set_time, set_az = info\n                deg_per_rad = 180.0/math.pi           # use to conv azimuth to deg\n                pass_duration = timedelta(set_time-rise_time)  # fraction of a day\n\n                if set_time > rise_time:  # only update if set time > rise time\n                    ground_station.date = set_time   # new obs time = prev set time\n\n                pass_data = {\n                    'start' : rise_time.datetime().ctime(),\n                    'end' : set_time.datetime().ctime(),\n                    'duration' : str(pass_duration),\n                    'rise_az' : (rise_az*deg_per_rad),\n                    'set_az' : (set_az*deg_per_rad)\n                }\n\n                # increase time by 1 min and look for next pass\n                ground_station.date = ground_station.date + ephem.minute\n                contacts.append(pass_data)\n        except ValueError:\n            # No (more) visible passes\n            pass\n        return contacts\n\n    if num_passes is None and duration is None:\n        # if neither are specified, get passes for the next 24 hours\n        try:\n            end_time = ephem.date(ground_station.date+1)\n            while (ground_station.date <= end_time):\n                sat.compute(ground_station)  # compute all body attributes for sat\n                # next pass command yields array with [0]=rise time,\n                # [1]=rise azimuth, [2]=max alt time, [3]=max alt,\n                # [4]=set time, [5]=set azimuth\n                info = ground_station.next_pass(sat)\n                rise_time, rise_az, max_alt_time, max_alt, set_time, set_az = info\n                deg_per_rad = 180.0/math.pi           # use to conv azimuth to deg\n                pass_duration = timedelta(set_time-rise_time)  # fraction of a day\n\n                if set_time > rise_time:  # only update if set time > rise time\n                    ground_station.date = set_time   # new obs time = prev set time\n\n                pass_data = {\n                    'start' : rise_time.datetime().ctime(),\n                    'end' : set_time.datetime().ctime(),\n                    'duration' : str(pass_duration),\n                    'rise_az' : (rise_az*deg_per_rad),\n                    'set_az' : (set_az*deg_per_rad)\n                }\n\n                # increase time by 1 min and look for next pass\n                ground_station.date = ground_station.date + ephem.minute\n                contacts.append(pass_data)\n        except ValueError:\n            # No (more) visible passes\n            pass\n        return contacts\n","scrolled":true,"state":"done","pos":2,"type":"cell","id":"c851de","kernel":"anaconda3"}
{"exec_count":99,"start":1497457167445,"input":"from itertools import islice\ndata = []\nwith open('amateur.txt') as f:\n    while True:\n        #an iterator that returns the next N lines and stops\n        tripleline = islice(f, 3)\n        #loop over these N lines, removing trailing spaces and \\n\n        tle = [x.rstrip() for x in tripleline]\n\n        #only accept complete data\n        #the end of the file *should* have len(tle)==0 but\n        #this also handles extra junk at the end\n        if len(tle) == 3:\n            data.append(tle)\n        else:\n            break\n","state":"done","pos":3,"type":"cell","end":1497457167453,"id":"c2fb7c","kernel":"anaconda3"}
{"exec_count":104,"input":"vu = ['Valparaiso University', '41.4639', '-87.0439', 245.089]\nstart_time = '2017/6/8 00:00:00'\nnum_passes = None\nduration = 24.0\nvu_passes = {}\n\nfor tle in data:\n    # use NORAD ID as key for each satellite\n    # value is list of passes, where each pass is a dictionary of data\n    noradID = tle[2][2:7]\n    vu_passes[noradID] = get_passes(vu, tle, start_time, num_passes=num_passes, duration=duration)\n\n    ","state":"done","pos":4,"type":"cell","id":"87142a","kernel":"anaconda3"}
{"output":{"0":{"name":"stdout","text":"NORAD ID: 22826 START: Thu Jun  8 07:04:59 2017 END: Thu Jun  8 07:09:22 2017\nNORAD ID: 22826 START: Thu Jun  8 08:40:31 2017 END: Thu Jun  8 08:55:26 2017\nNORAD ID: 22826 START: Thu Jun  8 10:20:08 2017 END: Thu Jun  8 10:34:30 2017\nNORAD ID: 22826 START: Thu Jun  8 12:02:07 2017 END: Thu Jun  8 12:08:08 2017\nNORAD ID: 22826 START: Thu Jun  8 18:22:46 2017 END: Thu Jun  8 18:32:55 2017\nNORAD ID: 22826 START: Thu Jun  8 19:58:38 2017 END: Thu Jun  8 20:13:46 2017\nNORAD ID: 22826 START: Thu Jun  8 21:39:19 2017 END: Thu Jun  8 21:52:43 2017\nNORAD ID: 22826 START: Fri Jun  9 08:11:31 2017 END: Fri Jun  9 08:25:16 2017\nNORAD ID: 32789 START: Thu Jun  8 01:17:11 2017 END: Thu Jun  8 01:26:55 2017\nNORAD ID: 32789 START: Thu Jun  8 02:50:04 2017 END: Thu Jun  8 03:02:31 2017\nNORAD ID: 32789 START: Thu Jun  8 04:28:19 2017 END: Thu Jun  8 04:35:15 2017\nNORAD ID: 32789 START: Thu Jun  8 14:27:17 2017 END: Thu Jun  8 14:38:00 2017\nNORAD ID: 32789 START: Thu Jun  8 16:01:35 2017 END: Thu Jun  8 16:13:35 2017\nNORAD ID: 32789 START: Thu Jun  8 17:38:40 2017 END: Thu Jun  8 17:43:50 2017\nNORAD ID: 32789 START: Fri Jun  9 01:13:41 2017 END: Fri Jun  9 01:23:08 2017\nNORAD ID: 27844 START: Thu Jun  8 00:01:50 2017 END: Thu Jun  8 00:16:52 2017\nNORAD ID: 27844 START: Thu Jun  8 01:48:56 2017 END: Thu Jun  8 01:52:40 2017\nNORAD ID: 27844 START: Thu Jun  8 10:39:09 2017 END: Thu Jun  8 10:51:23 2017\nNORAD ID: 27844 START: Thu Jun  8 12:18:07 2017 END: Thu Jun  8 12:33:52 2017\nNORAD ID: 27844 START: Thu Jun  8 13:59:05 2017 END: Thu Jun  8 14:11:27 2017\nNORAD ID: 27844 START: Thu Jun  8 22:01:30 2017 END: Thu Jun  8 22:15:13 2017\nNORAD ID: 27844 START: Thu Jun  8 23:40:15 2017 END: Thu Jun  8 23:55:45 2017\nNORAD ID: 27844 START: Fri Jun  9 01:24:34 2017 END: Fri Jun  9 01:33:39 2017\nNORAD ID: 39436 START: Thu Jun  8 05:06:04 2017 END: Thu Jun  8 05:16:31 2017\nNORAD ID: 39436 START: Thu Jun  8 06:39:02 2017 END: Thu Jun  8 06:49:10 2017\nNORAD ID: 39436 START: Thu Jun  8 18:00:57 2017 END: Thu Jun  8 18:11:25 2017\nNORAD ID: 39436 START: Thu Jun  8 19:33:53 2017 END: Thu Jun  8 19:43:52 2017\nNORAD ID: 39436 START: Fri Jun  9 04:34:00 2017 END: Fri Jun  9 04:42:47 2017\nNORAD ID: 40905 START: Thu Jun  8 00:20:28 2017 END: Thu Jun  8 00:30:26 2017\nNORAD ID: 40905 START: Thu Jun  8 10:19:12 2017 END: Thu Jun  8 10:26:41 2017\nNORAD ID: 40905 START: Thu Jun  8 11:51:43 2017 END: Thu Jun  8 12:03:53 2017\nNORAD ID: 40905 START: Thu Jun  8 13:26:58 2017 END: Thu Jun  8 13:35:54 2017\nNORAD ID: 40905 START: Thu Jun  8 21:03:36 2017 END: Thu Jun  8 21:08:21 2017\nNORAD ID: 40905 START: Thu Jun  8 22:33:11 2017 END: Thu Jun  8 22:45:03 2017\nNORAD ID: 40905 START: Fri Jun  9 00:08:09 2017 END: Fri Jun  9 00:18:52 2017\nNORAD ID: 39153 START: Thu Jun  8 02:38:15 2017 END: Thu Jun  8 02:42:20 2017\nNORAD ID: 39153 START: Thu Jun  8 04:08:55 2017 END: Thu Jun  8 04:21:30 2017\nNORAD ID: 39153 START: Thu Jun  8 05:45:18 2017 END: Thu Jun  8 05:57:41 2017\nNORAD ID: 39153 START: Thu Jun  8 15:58:37 2017 END: Thu Jun  8 16:06:02 2017\nNORAD ID: 39153 START: Thu Jun  8 17:32:46 2017 END: Thu Jun  8 17:46:05 2017\nNORAD ID: 39153 START: Thu Jun  8 19:09:43 2017 END: Thu Jun  8 19:20:42 2017\nNORAD ID: 39153 START: Fri Jun  9 02:56:08 2017 END: Fri Jun  9 03:03:33 2017\nNORAD ID: 39446 START: Thu Jun  8 00:17:38 2017 END: Thu Jun  8 00:30:00 2017\nNORAD ID: 39446 START: Thu Jun  8 01:53:39 2017 END: Thu Jun  8 02:06:36 2017\nNORAD ID: 39446 START: Thu Jun  8 12:08:11 2017 END: Thu Jun  8 12:15:33 2017\nNORAD ID: 39446 START: Thu Jun  8 13:42:16 2017 END: Thu Jun  8 13:56:15 2017\nNORAD ID: 39446 START: Thu Jun  8 15:19:12 2017 END: Thu Jun  8 15:31:26 2017\nNORAD ID: 39446 START: Thu Jun  8 23:07:13 2017 END: Thu Jun  8 23:13:49 2017\nNORAD ID: 39446 START: Fri Jun  9 00:39:13 2017 END: Fri Jun  9 00:52:20 2017\nNORAD ID: 26931 START: Thu Jun  8 00:40:53 2017 END: Thu Jun  8 00:51:18 2017\nNORAD ID: 26931 START: Thu Jun  8 02:29:33 2017 END: Thu Jun  8 02:36:27 2017\nNORAD ID: 26931 START: Thu Jun  8 04:13:46 2017 END: Thu Jun  8 04:25:33 2017\nNORAD ID: 26931 START: Thu Jun  8 05:56:46 2017 END: Thu Jun  8 06:12:25 2017\nNORAD ID: 26931 START: Thu Jun  8 07:40:22 2017 END: Thu Jun  8 07:55:18 2017\nNORAD ID: 26931 START: Thu Jun  8 19:02:24 2017 END: Thu Jun  8 19:06:29 2017\nNORAD ID: 26931 START: Thu Jun  8 20:38:42 2017 END: Thu Jun  8 20:53:55 2017\nNORAD ID: 26931 START: Thu Jun  8 22:21:55 2017 END: Thu Jun  8 22:37:25 2017\nNORAD ID: 26931 START: Fri Jun  9 00:09:05 2017 END: Fri Jun  9 00:20:26 2017\nNORAD ID: 35935 START: Thu Jun  8 05:57:27 2017 END: Thu Jun  8 06:05:52 2017\nNORAD ID: 35935 START: Thu Jun  8 07:31:16 2017 END: Thu Jun  8 07:45:22 2017\nNORAD ID: 35935 START: Thu Jun  8 09:09:57 2017 END: Thu Jun  8 09:22:47 2017\nNORAD ID: 35935 START: Thu Jun  8 19:32:07 2017 END: Thu Jun  8 19:43:37 2017\nNORAD ID: 35935 START: Thu Jun  8 21:09:00 2017 END: Thu Jun  8 21:23:25 2017\nNORAD ID: 35935 START: Thu Jun  8 22:47:57 2017 END: Thu Jun  8 22:58:24 2017\nNORAD ID: 35935 START: Fri Jun  9 06:39:27 2017 END: Fri Jun  9 06:51:30 2017\nNORAD ID: 35932 START: Thu Jun  8 06:37:03 2017 END: Thu Jun  8 06:49:19 2017\nNORAD ID: 35932 START: Thu Jun  8 08:13:21 2017 END: Thu Jun  8 08:27:40 2017\nNORAD ID: 35932 START: Thu Jun  8 09:55:02 2017 END: Thu Jun  8 10:03:22 2017\nNORAD ID: 35932 START: Thu Jun  8 18:39:56 2017 END: Thu Jun  8 18:42:26 2017\nNORAD ID: 35932 START: Thu Jun  8 20:13:14 2017 END: Thu Jun  8 20:27:10 2017\nNORAD ID: 35932 START: Thu Jun  8 21:51:11 2017 END: Thu Jun  8 22:04:29 2017\nNORAD ID: 35932 START: Thu Jun  8 23:32:09 2017 END: Thu Jun  8 23:35:53 2017\nNORAD ID: 35932 START: Fri Jun  9 05:46:17 2017 END: Fri Jun  9 05:53:59 2017\nNORAD ID: 33493 START: Thu Jun  8 02:07:11 2017 END: Thu Jun  8 02:14:56 2017\nNORAD ID: 33493 START: Thu Jun  8 03:40:40 2017 END: Thu Jun  8 03:53:21 2017\nNORAD ID: 33493 START: Thu Jun  8 05:16:49 2017 END: Thu Jun  8 05:26:35 2017\nNORAD ID: 33493 START: Thu Jun  8 12:58:06 2017 END: Thu Jun  8 13:05:10 2017\nNORAD ID: 33493 START: Thu Jun  8 14:29:37 2017 END: Thu Jun  8 14:42:12 2017\nNORAD ID: 33493 START: Thu Jun  8 16:06:08 2017 END: Thu Jun  8 16:16:49 2017\nNORAD ID: 33493 START: Fri Jun  9 02:11:57 2017 END: Fri Jun  9 02:20:19 2017\nNORAD ID: 40908 START: Thu Jun  8 00:48:43 2017 END: Thu Jun  8 00:56:19 2017\nNORAD ID: 40908 START: Thu Jun  8 10:45:14 2017 END: Thu Jun  8 10:55:08 2017\nNORAD ID: 40908 START: Thu Jun  8 12:18:44 2017 END: Thu Jun  8 12:30:45 2017\nNORAD ID: 40908 START: Thu Jun  8 13:54:51 2017 END: Thu Jun  8 14:01:17 2017\nNORAD ID: 40908 START: Thu Jun  8 21:28:39 2017 END: Thu Jun  8 21:36:44 2017\nNORAD ID: 40908 START: Thu Jun  8 23:00:04 2017 END: Thu Jun  8 23:12:19 2017\nNORAD ID: 40908 START: Fri Jun  9 00:36:29 2017 END: Fri Jun  9 00:45:23 2017\nNORAD ID: 39433 START: Thu Jun  8 01:37:55 2017 END: Thu Jun  8 01:48:41 2017\nNORAD ID: 39433 START: Thu Jun  8 03:11:47 2017 END: Thu Jun  8 03:24:59 2017\nNORAD ID: 39433 START: Thu Jun  8 04:50:56 2017 END: Thu Jun  8 04:58:35 2017\nNORAD ID: 39433 START: Thu Jun  8 14:55:07 2017 END: Thu Jun  8 15:07:03 2017\nNORAD ID: 39433 START: Thu Jun  8 16:30:29 2017 END: Thu Jun  8 16:43:00 2017\nNORAD ID: 39433 START: Thu Jun  8 18:08:38 2017 END: Thu Jun  8 18:13:33 2017\nNORAD ID: 39433 START: Fri Jun  9 01:46:38 2017 END: Fri Jun  9 01:57:56 2017\nNORAD ID: 38340 START: Thu Jun  8 00:03:40 2017 END: Thu Jun  8 00:15:42 2017\nNORAD ID: 38340 START: Thu Jun  8 10:17:51 2017 END: Thu Jun  8 10:27:35 2017\nNORAD ID: 38340 START: Thu Jun  8 11:53:02 2017 END: Thu Jun  8 12:06:45 2017\nNORAD ID: 38340 START: Thu Jun  8 13:30:31 2017 END: Thu Jun  8 13:40:59 2017\nNORAD ID: 38340 START: Thu Jun  8 21:16:54 2017 END: Thu Jun  8 21:26:40 2017\nNORAD ID: 38340 START: Thu Jun  8 22:50:44 2017 END: Thu Jun  8 23:04:20 2017\nNORAD ID: 38340 START: Fri Jun  9 00:29:27 2017 END: Fri Jun  9 00:39:45 2017\nNORAD ID: 33499 START: Thu Jun  8 00:13:10 2017 END: Thu Jun  8 00:23:45 2017\nNORAD ID: 33499 START: Thu Jun  8 07:59:53 2017 END: Thu Jun  8 08:09:16 2017\nNORAD ID: 33499 START: Thu Jun  8 09:33:32 2017 END: Thu Jun  8 09:47:03 2017\nNORAD ID: 33499 START: Thu Jun  8 11:12:04 2017 END: Thu Jun  8 11:22:35 2017\nNORAD ID: 33499 START: Thu Jun  8 21:24:42 2017 END: Thu Jun  8 21:36:09 2017\nNORAD ID: 33499 START: Thu Jun  8 23:00:35 2017 END: Thu Jun  8 23:14:04 2017\nNORAD ID: 33499 START: Fri Jun  9 00:38:39 2017 END: Fri Jun  9 00:47:07 2017\nNORAD ID: 32791 START: Thu Jun  8 01:09:18 2017 END: Thu Jun  8 01:22:12 2017\nNORAD ID: 32791 START: Thu Jun  8 02:50:12 2017 END: Thu Jun  8 02:54:37 2017\nNORAD ID: 32791 START: Thu Jun  8 12:52:48 2017 END: Thu Jun  8 13:05:12 2017\nNORAD ID: 32791 START: Thu Jun  8 14:28:37 2017 END: Thu Jun  8 14:40:28 2017\nNORAD ID: 32791 START: Thu Jun  8 23:44:34 2017 END: Thu Jun  8 23:56:29 2017\nNORAD ID: 32791 START: Fri Jun  9 01:19:42 2017 END: Fri Jun  9 01:32:21 2017\nNORAD ID: 40928 START: Thu Jun  8 00:29:52 2017 END: Thu Jun  8 00:40:30 2017\nNORAD ID: 40928 START: Thu Jun  8 02:02:57 2017 END: Thu Jun  8 02:13:15 2017\nNORAD ID: 40928 START: Thu Jun  8 13:25:07 2017 END: Thu Jun  8 13:35:51 2017\nNORAD ID: 40928 START: Thu Jun  8 14:58:15 2017 END: Thu Jun  8 15:08:11 2017\nNORAD ID: 40928 START: Thu Jun  8 23:58:23 2017 END: Fri Jun  9 00:07:26 2017\nNORAD ID: 32785 START: Thu Jun  8 00:46:43 2017 END: Thu Jun  8 00:59:49 2017\nNORAD ID: 32785 START: Thu Jun  8 02:27:03 2017 END: Thu Jun  8 02:32:58 2017\nNORAD ID: 32785 START: Thu Jun  8 12:31:25 2017 END: Thu Jun  8 12:43:48 2017\nNORAD ID: 32785 START: Thu Jun  8 14:07:18 2017 END: Thu Jun  8 14:19:25 2017\nNORAD ID: 32785 START: Thu Jun  8 23:24:14 2017 END: Thu Jun  8 23:36:08 2017\nNORAD ID: 32785 START: Fri Jun  9 00:59:23 2017 END: Fri Jun  9 01:12:13 2017\nNORAD ID: 39770 START: Thu Jun  8 03:33:52 2017 END: Thu Jun  8 03:42:08 2017\nNORAD ID: 39770 START: Thu Jun  8 05:06:28 2017 END: Thu Jun  8 05:19:30 2017\nNORAD ID: 39770 START: Thu Jun  8 06:43:59 2017 END: Thu Jun  8 06:54:34 2017\nNORAD ID: 39770 START: Thu Jun  8 16:52:35 2017 END: Thu Jun  8 17:02:59 2017\nNORAD ID: 39770 START: Thu Jun  8 18:27:32 2017 END: Thu Jun  8 18:40:44 2017\nNORAD ID: 39770 START: Thu Jun  8 20:04:45 2017 END: Thu Jun  8 20:13:36 2017\nNORAD ID: 39770 START: Fri Jun  9 03:47:05 2017 END: Fri Jun  9 03:56:39 2017\nNORAD ID: 37841 START: Thu Jun  8 03:32:35 2017 END: Thu Jun  8 03:36:36 2017\nNORAD ID: 37841 START: Thu Jun  8 05:17:19 2017 END: Thu Jun  8 05:27:57 2017\nNORAD ID: 37841 START: Thu Jun  8 07:04:48 2017 END: Thu Jun  8 07:16:38 2017\nNORAD ID: 37841 START: Thu Jun  8 08:53:35 2017 END: Thu Jun  8 09:03:58 2017\nNORAD ID: 37841 START: Thu Jun  8 10:46:01 2017 END: Thu Jun  8 10:47:38 2017\nNORAD ID: 37841 START: Fri Jun  9 03:18:39 2017 END: Fri Jun  9 03:24:27 2017\nNORAD ID: 40907 START: Thu Jun  8 01:07:50 2017 END: Thu Jun  8 01:12:17 2017\nNORAD ID: 40907 START: Thu Jun  8 11:01:37 2017 END: Thu Jun  8 11:12:25 2017\nNORAD ID: 40907 START: Thu Jun  8 12:35:29 2017 END: Thu Jun  8 12:47:05 2017\nNORAD ID: 40907 START: Thu Jun  8 14:12:35 2017 END: Thu Jun  8 14:16:00 2017\nNORAD ID: 40907 START: Thu Jun  8 21:43:54 2017 END: Thu Jun  8 21:53:11 2017\nNORAD ID: 40907 START: Thu Jun  8 23:16:04 2017 END: Thu Jun  8 23:28:15 2017\nNORAD ID: 40907 START: Fri Jun  9 00:53:31 2017 END: Fri Jun  9 01:00:30 2017\nNORAD ID: 40926 START: Thu Jun  8 00:56:50 2017 END: Thu Jun  8 01:07:33 2017\nNORAD ID: 40926 START: Thu Jun  8 02:30:12 2017 END: Thu Jun  8 02:39:32 2017\nNORAD ID: 40926 START: Thu Jun  8 13:49:01 2017 END: Thu Jun  8 13:59:40 2017\nNORAD ID: 40926 START: Thu Jun  8 15:22:01 2017 END: Thu Jun  8 15:31:08 2017\nNORAD ID: 40926 START: Fri Jun  9 00:19:27 2017 END: Fri Jun  9 00:28:35 2017\nNORAD ID: 27607 START: Thu Jun  8 01:27:51 2017 END: Thu Jun  8 00:00:43 2017\nNORAD ID: 27607 START: Thu Jun  8 01:27:51 2017 END: Thu Jun  8 01:41:09 2017\nNORAD ID: 27607 START: Thu Jun  8 03:11:55 2017 END: Thu Jun  8 03:21:08 2017\nNORAD ID: 27607 START: Thu Jun  8 04:56:59 2017 END: Thu Jun  8 05:02:38 2017\nNORAD ID: 27607 START: Thu Jun  8 06:38:05 2017 END: Thu Jun  8 06:47:54 2017\nNORAD ID: 27607 START: Thu Jun  8 08:18:04 2017 END: Thu Jun  8 08:31:34 2017\nNORAD ID: 27607 START: Thu Jun  8 09:58:39 2017 END: Thu Jun  8 10:11:40 2017\nNORAD ID: 27607 START: Thu Jun  8 22:34:12 2017 END: Thu Jun  8 22:44:40 2017\nNORAD ID: 27607 START: Fri Jun  9 00:12:10 2017 END: Fri Jun  9 00:26:10 2017\nNORAD ID: 40910 START: Thu Jun  8 11:11:55 2017 END: Thu Jun  8 11:23:03 2017\nNORAD ID: 40910 START: Thu Jun  8 12:45:56 2017 END: Thu Jun  8 12:57:16 2017\nNORAD ID: 40910 START: Thu Jun  8 21:53:37 2017 END: Thu Jun  8 22:03:23 2017\nNORAD ID: 40910 START: Thu Jun  8 23:26:07 2017 END: Thu Jun  8 23:38:13 2017\nNORAD ID: 40910 START: Fri Jun  9 01:04:13 2017 END: Fri Jun  9 01:09:54 2017\nNORAD ID: 39136 START: Thu Jun  8 06:27:17 2017 END: Thu Jun  8 06:37:01 2017\nNORAD ID: 39136 START: Thu Jun  8 08:02:58 2017 END: Thu Jun  8 08:15:39 2017\nNORAD ID: 39136 START: Thu Jun  8 09:42:39 2017 END: Thu Jun  8 09:52:54 2017\nNORAD ID: 39136 START: Thu Jun  8 11:25:34 2017 END: Thu Jun  8 11:29:44 2017\nNORAD ID: 39136 START: Thu Jun  8 13:06:19 2017 END: Thu Jun  8 13:10:16 2017\nNORAD ID: 39136 START: Thu Jun  8 14:43:09 2017 END: Thu Jun  8 14:53:19 2017\nNORAD ID: 39136 START: Thu Jun  8 16:20:22 2017 END: Thu Jun  8 16:33:08 2017\nNORAD ID: 39136 START: Thu Jun  8 17:58:53 2017 END: Thu Jun  8 18:09:02 2017\nNORAD ID: 39136 START: Fri Jun  9 06:13:01 2017 END: Fri Jun  9 06:22:55 2017\nNORAD ID: 40021 START: Thu Jun  8 04:29:27 2017 END: Thu Jun  8 04:39:53 2017\nNORAD ID: 40021 START: Thu Jun  8 06:04:12 2017 END: Thu Jun  8 06:17:18 2017\nNORAD ID: 40021 START: Thu Jun  8 07:41:15 2017 END: Thu Jun  8 07:49:50 2017\nNORAD ID: 40021 START: Thu Jun  8 15:22:23 2017 END: Thu Jun  8 15:31:51 2017\nNORAD ID: 40021 START: Thu Jun  8 16:55:34 2017 END: Thu Jun  8 17:08:35 2017\nNORAD ID: 40021 START: Thu Jun  8 18:33:44 2017 END: Thu Jun  8 18:42:54 2017\nNORAD ID: 40021 START: Fri Jun  9 04:39:45 2017 END: Fri Jun  9 04:50:56 2017\nNORAD ID: 22825 START: Thu Jun  8 07:54:11 2017 END: Thu Jun  8 08:06:49 2017\nNORAD ID: 22825 START: Thu Jun  8 09:32:50 2017 END: Thu Jun  8 09:48:13 2017\nNORAD ID: 22825 START: Thu Jun  8 11:13:23 2017 END: Thu Jun  8 11:24:49 2017\nNORAD ID: 22825 START: Thu Jun  8 17:40:55 2017 END: Thu Jun  8 17:43:06 2017\nNORAD ID: 22825 START: Thu Jun  8 19:12:46 2017 END: Thu Jun  8 19:26:29 2017\nNORAD ID: 22825 START: Thu Jun  8 20:51:15 2017 END: Thu Jun  8 21:06:21 2017\nNORAD ID: 22825 START: Thu Jun  8 22:35:35 2017 END: Thu Jun  8 22:43:16 2017\nNORAD ID: 22825 START: Fri Jun  9 07:26:13 2017 END: Fri Jun  9 07:35:49 2017\nNORAD ID: 36799 START: Thu Jun  8 05:17:34 2017 END: Thu Jun  8 05:26:49 2017\nNORAD ID: 36799 START: Thu Jun  8 06:50:36 2017 END: Thu Jun  8 07:03:33 2017\nNORAD ID: 36799 START: Thu Jun  8 08:28:36 2017 END: Thu Jun  8 08:37:53 2017\nNORAD ID: 36799 START: Thu Jun  8 18:34:37 2017 END: Thu Jun  8 18:45:32 2017\nNORAD ID: 36799 START: Thu Jun  8 20:09:32 2017 END: Thu Jun  8 20:22:29 2017\nNORAD ID: 36799 START: Thu Jun  8 21:46:45 2017 END: Thu Jun  8 21:54:33 2017\nNORAD ID: 36799 START: Fri Jun  9 05:27:07 2017 END: Fri Jun  9 05:37:07 2017\nNORAD ID: 40300 START: Thu Jun  8 03:07:05 2017 END: Thu Jun  8 03:17:28 2017\nNORAD ID: 40300 START: Thu Jun  8 04:40:08 2017 END: Thu Jun  8 04:51:35 2017\nNORAD ID: 40300 START: Thu Jun  8 16:09:37 2017 END: Thu Jun  8 16:20:22 2017\nNORAD ID: 40300 START: Thu Jun  8 17:43:21 2017 END: Thu Jun  8 17:54:11 2017\nNORAD ID: 40300 START: Fri Jun  9 02:49:12 2017 END: Fri Jun  9 02:58:29 2017\nNORAD ID: 07530 START: Thu Jun  8 07:27:43 2017 END: Thu Jun  8 07:44:34 2017\nNORAD ID: 07530 START: Thu Jun  8 09:19:04 2017 END: Thu Jun  8 09:41:42 2017\nNORAD ID: 07530 START: Thu Jun  8 11:12:18 2017 END: Thu Jun  8 11:32:52 2017\nNORAD ID: 07530 START: Thu Jun  8 13:06:12 2017 END: Thu Jun  8 13:18:54 2017\nNORAD ID: 07530 START: Thu Jun  8 16:43:12 2017 END: Thu Jun  8 16:52:59 2017\nNORAD ID: 07530 START: Thu Jun  8 18:27:58 2017 END: Thu Jun  8 18:47:04 2017\nNORAD ID: 07530 START: Thu Jun  8 20:17:56 2017 END: Thu Jun  8 20:40:30 2017\nNORAD ID: 07530 START: Thu Jun  8 22:13:20 2017 END: Thu Jun  8 22:32:34 2017\nNORAD ID: 07530 START: Fri Jun  9 08:19:30 2017 END: Fri Jun  9 08:40:29 2017\nNORAD ID: 40912 START: Thu Jun  8 01:00:52 2017 END: Thu Jun  8 01:08:03 2017\nNORAD ID: 40912 START: Thu Jun  8 10:55:32 2017 END: Thu Jun  8 11:05:09 2017\nNORAD ID: 40912 START: Thu Jun  8 12:28:44 2017 END: Thu Jun  8 12:40:33 2017\nNORAD ID: 40912 START: Thu Jun  8 14:04:35 2017 END: Thu Jun  8 14:10:50 2017\nNORAD ID: 40912 START: Thu Jun  8 21:37:14 2017 END: Thu Jun  8 21:44:49 2017\nNORAD ID: 40912 START: Thu Jun  8 23:08:11 2017 END: Thu Jun  8 23:20:15 2017\nNORAD ID: 40912 START: Fri Jun  9 00:44:09 2017 END: Fri Jun  9 00:53:08 2017\nNORAD ID: 37839 START: Thu Jun  8 02:23:20 2017 END: Thu Jun  8 02:33:18 2017\nNORAD ID: 37839 START: Thu Jun  8 04:10:29 2017 END: Thu Jun  8 04:21:56 2017"},"1":{"more_output":true}},"exec_count":105,"start":1497457249129,"input":"for sat, passes in vu_passes.items():\n    for obs in passes:\n        print('NORAD ID:', sat, 'START:', obs['start'], 'END:', obs['end'])\n","scrolled":true,"state":"done","pos":5,"type":"cell","end":1497457249680,"id":"0ff0b9","kernel":"anaconda3"}
{"exec_count":107,"start":1497457487093,"input":"#import matplotlib.pyplot as plt\n#import numpy as np\n#t = np.arange(0., 5., 0.2)\n#plt.plot(t,t,'r--',t,t**2,'bs',t,t**3,'g^')\n#plt.axis([0,6,0,7])\n#plt.ylabel('y-axis')\n#plt.xlabel('x-axis')\n#plt.title('Graph')\n#plt.show()","state":"done","pos":6,"type":"cell","end":1497457487095,"id":"2c56e3","kernel":"anaconda3"}
{"output":{"0":{"evalue":"list indices must be integers or slices, not float","ename":"TypeError","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-149-f3e8597777fd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m     \u001b[0mcint\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mintegrate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintegrand\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/projects/anaconda3/lib/python3.5/site-packages/scipy/integrate/quadpack.py\u001b[0m in \u001b[0;36mquad\u001b[0;34m(func, a, b, args, full_output, epsabs, epsrel, limit, points, weight, wvar, wopts, maxp1, limlst)\u001b[0m\n\u001b[1;32m    321\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mweight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    322\u001b[0m         retval = _quad(func, a, b, args, full_output, epsabs, epsrel, limit,\n\u001b[0;32m--> 323\u001b[0;31m                        points)\n\u001b[0m\u001b[1;32m    324\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    325\u001b[0m         retval = _quad_weight(func, a, b, args, full_output, epsabs, epsrel,\n","\u001b[0;32m/projects/anaconda3/lib/python3.5/site-packages/scipy/integrate/quadpack.py\u001b[0m in \u001b[0;36m_quad\u001b[0;34m(func, a, b, args, full_output, epsabs, epsrel, limit, points)\u001b[0m\n\u001b[1;32m    386\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mpoints\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    387\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minfbounds\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 388\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0m_quadpack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_qagse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfull_output\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepsabs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepsrel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    389\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    390\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0m_quadpack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_qagie\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbound\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minfbounds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfull_output\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepsabs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepsrel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-149-f3e8597777fd>\u001b[0m in \u001b[0;36mintegrand\u001b[0;34m(t)\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mintegrand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-149-f3e8597777fd>\u001b[0m in \u001b[0;36ma\u001b[0;34m(t)\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not float"]}},"exec_count":149,"input":"#C_j\nimport scipy.integrate as integrate\nT = 1\nn = 10\ncj = 0\n\ndef a(t):\n    a = [0,0,0,0]\n    return a[t]\n\ndef r(t):\n    return 1\n\ndef l(t):\n    return 1\n\ndef nu(t):\n    return 1\n\ndef integrand(t):\n    return a(t)*r(t)*l(t)*nu(t)\n\nfor i in range(n):\n    cint = integrate.quad(integrand, 0, T)","scrolled":true,"state":"done","pos":7,"type":"cell","id":"912952","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"[74, 24]"},"exec_count":111}},"exec_count":111,"start":1497457777974,"input":"a = [len(data),int(duration)]\na","state":"done","pos":4.5,"type":"cell","end":1497457777992,"id":"0c59e3","kernel":"anaconda3"}