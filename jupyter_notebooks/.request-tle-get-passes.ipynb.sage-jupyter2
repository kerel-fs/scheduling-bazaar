{"type":"settings","kernel":"anaconda3","backend_state":"running","trust":true,"kernel_state":"idle"}
{"type":"file","last_load":1496940866622}
{"exec_count":60,"start":1497020151130,"input":"# Import necessary libraries\nimport ephem\nimport math\n\n\n# get_passes() function definition\ndef get_passes(observer, tle, start_time, num_passes=None, duration=None):\n    \"\"\"Config obs and sat, Return pass data for all passes in given interval.\n\n    Arguments:\n    observer -- 4 element list containing desired [name,lat,lon,alt]\n    tle -- 3 element list containing desired tle [line0,line1,line2]\n    start_time -- ephem.date string formatted 'yyyy/mm/dd hr:min:sec'\n    num_passes -- integer number of desired passes (defualt None)\n    duration -- float number of hours or fraction of hours (default None)\n\n    Specify either num_passes or duration.\n    If both, use num_passes.\n    If neither, find passes for next 24 hours.\n    \"\"\"\n\n    obs_name, obs_lat, obs_lon, obs_alt = observer\n    tle_line0, tle_line1, tle_line2 = tle\n\n    # Set up location of observer\n    ground_station = ephem.Observer()\n    ground_station.name = obs_name                # name string\n    ground_station.lon = obs_lon                  # in degrees (+E)\n    ground_station.lat = obs_lat                  # in degrees (+N)\n    ground_station.elevation = obs_alt            # in meters\n    ground_station.date = ephem.date(start_time)  # in UTC\n\n    # Read in most recent satellite TLE data\n    sat = ephem.readtle(tle_line0, tle_line1, tle_line2)\n\n    pass_data = []\n    i = 0\n\n    if num_passes is not None and duration is None:\n        # if only num_passes specified\n        try:\n            for i in range(num_passes):\n                sat.compute(ground_station)  # compute all body attributes for sat\n                \"\"\"next pass command yields array with [0]=rise time,\n                [1]=rise azimuth, [2]=max alt time, [3]=max alt,\n                [4]=set time, [5]=set azimuth\"\"\"\n                info = ground_station.next_pass(sat)\n                rise_time, rise_az, max_alt_time, max_alt, set_time, set_az = info\n                deg_per_rad = 180.0/math.pi           # use to conv azimuth to deg\n                pass_duration = (set_time-rise_time)  # fraction of a day\n\n                if set_time > rise_time:  # only update if set time > rise time\n                    ground_station.date = set_time  # new obs time = prev set time\n\n                pass_data.append([rise_time, set_time, pass_duration,\n                                (rise_az*deg_per_rad), (set_az*deg_per_rad)])\n\n                # increase by 1 min and look for next pass\n                ground_station.date = ground_station.date + ephem.minute\n        except ValueError:\n            # No (more) visible passes\n            pass\n        return pass_data\n\n    if num_passes is None and duration is not None:\n        # if only duration specified\n        try:\n            end_time = ephem.date(ground_station.date+duration*ephem.hour)\n            while (ground_station.date <= end_time):\n                sat.compute(ground_station)  # compute all body attributes for sat\n                \"\"\"next pass command yields array with [0]=rise time,\n                [1]=rise azimuth, [2]=max alt time, [3]=max alt,\n                [4]=set time, [5]=set azimuth\"\"\"\n                info = ground_station.next_pass(sat)\n                rise_time, rise_az, max_alt_time, max_alt, set_time, set_az = info\n                deg_per_rad = 180.0/math.pi           # use to conv azimuth to deg\n                pass_duration = (set_time-rise_time)  # fraction of a day\n\n                if set_time > rise_time:  # only update if set time > rise time\n                    ground_station.date = set_time  # new obs time = prev set time\n\n                pass_data.append([rise_time, set_time, pass_duration,\n                                (rise_az*deg_per_rad), (set_az*deg_per_rad)])\n\n                # increase time by 1 min and look for next pass\n                ground_station.date = ground_station.date + ephem.minute\n        except ValueError:\n            # No (more) visible passes\n            pass\n        return pass_data\n\n    if num_passes is not None and duration is not None:\n        # if both are specified, use num_passes\n        try:\n            for i in range(num_passes):\n                sat.compute(ground_station)  # compute all body attributes for sat\n                \"\"\"next pass command yields array with [0]=rise time,\n                [1]=rise azimuth, [2]=max alt time, [3]=max alt,\n                [4]=set time, [5]=set azimuth\"\"\"\n                info = ground_station.next_pass(sat)\n                rise_time, rise_az, max_alt_time, max_alt, set_time, set_az = info\n                deg_per_rad = 180.0/math.pi           # use to conv azimuth to deg\n                pass_duration = (set_time-rise_time)  # fraction of a day\n\n                if set_time > rise_time:  # only update if set time > rise time\n                    ground_station.date = set_time   # new obs time = prev set time\n\n                pass_data.append([rise_time, set_time, pass_duration,\n                                (rise_az*deg_per_rad), (set_az*deg_per_rad)])\n\n                # increase time by 1 min and look for next pass\n                ground_station.date = ground_station.date + ephem.minute\n        except ValueError:\n            # No (more) visible passes\n            pass\n        return pass_data\n\n    if num_passes is None and duration is None:\n        # if neither are specified, get passes for the next 24 hours\n        try:\n            end_time = ephem.date(ground_station.date+1)\n            while (ground_station.date <= end_time):\n                sat.compute(ground_station)  # compute all body attributes for sat\n                \"\"\"next pass command yields array with [0]=rise time,\n                [1]=rise azimuth, [2]=max alt time, [3]=max alt,\n                [4]=set time, [5]=set azimuth\"\"\"\n                info = ground_station.next_pass(sat)\n                rise_time, rise_az, max_alt_time, max_alt, set_time, set_az = info\n                deg_per_rad = 180.0/math.pi           # use to conv azimuth to deg\n                pass_duration = (set_time-rise_time)  # fraction of a day\n\n                if set_time > rise_time:  # only update if set time > rise time\n                    ground_station.date = set_time   # new obs time = prev set time\n\n                pass_data.append([rise_time, set_time, pass_duration,\n                                (rise_az*deg_per_rad), (set_az*deg_per_rad)])\n\n                # increase time by 1 min and look for next pass\n                ground_station.date = ground_station.date + ephem.minute\n        except ValueError:\n            # No (more) visible passes\n            pass\n        return pass_data\n","state":"done","pos":0,"type":"cell","end":1497020151499,"id":"22831e","kernel":"anaconda3"}
{"exec_count":61,"start":1497020152137,"input":"import requests\n\n#def file_len(fname):\n#    \"\"\"Return lengths of file\"\"\"\n#    with open(fname) as f:\n#        for i, l in enumerate(f):\n#            pass\n#    return i + 1","state":"done","pos":1,"type":"cell","end":1497020152138,"id":"37a4df","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"[['OSCAR 7 (AO-7)',\n  '1 07530U 74089B   17157.85566058 -.00000032  00000-0  74274-4 0  9991',\n  '2 07530 101.6293 126.7439 0012026 344.7437  44.8584 12.53627301947333'],\n ['UOSAT 2 (UO-11)',\n  '1 14781U 84021B   17157.57376735  .00000098  00000-0  18371-4 0  9991',\n  '2 14781  97.6981 203.6799 0007351 227.5873 132.4720 14.82898575767779'],\n ['LUSAT (LO-19)',\n  '1 20442U 90005G   17157.80919745 -.00000011  00000-0  11872-4 0  9996',\n  '2 20442  98.5753  94.4288 0011798 172.7670 187.3686 14.32861011430072'],\n ['EYESAT-1 (AO-27)',\n  '1 22825U 93061C   17157.83712816 -.00000010  00000-0  13989-4 0  9991',\n  '2 22825  98.8112 123.2914 0008598   9.6571 350.4775 14.29997613235653'],\n ['ITAMSAT (IO-26)',\n  '1 22826U 93061D   17157.87055661 -.00000009  00000-0  13959-4 0  9999',\n  '2 22826  98.8055 123.4085 0008931 359.6761   0.4413 14.30326285236106'],\n ['RADIO ROSTO (RS-15)',\n  '1 23439U 94085A   17157.65856149 -.00000029  00000-0  38782-3 0  9995',\n  '2 23439  64.8155 236.1967 0167137 247.5959 269.4381 11.27566381924224'],\n ['JAS-2 (FO-29)',\n  '1 24278U 96046B   17157.66398894 -.00000002  00000-0  34572-4 0  9990',\n  '2 24278  98.5658  42.3207 0350569   4.8670 355.5736 13.53076703 27207'],\n ['TECHSAT 1B (GO-32)',\n  '1 25397U 98043D   17157.79297896 -.00000026  00000-0  74841-5 0  9996',\n  '2 25397  98.6093 100.3490 0002171  57.9074 302.2315 14.23622944982094'],\n ['ISS (ZARYA)',\n  '1 25544U 98067A   17157.94655197  .00002630  00000-0  47191-4 0  9994',\n  '2 25544  51.6418  89.3693 0004703 241.3496 157.2990 15.53992000 60168'],\n ['PCSAT (NO-44)',\n  '1 26931U 01043C   17157.89962793 -.00000038  00000-0  17340-4 0  9994',\n  '2 26931  67.0507 117.7391 0007958 267.1565  92.8625 14.30462437818809'],\n ['SAUDISAT 1C (SO-50)',\n  '1 27607U 02058C   17157.49644987  .00000001  00000-0  20508-4 0  9999',\n  '2 27607  64.5539 158.2304 0029859 102.2206 258.2243 14.75328408777532'],\n ['CUTE-1 (CO-55)',\n  '1 27844U 03031E   17157.94320203  .00000060  00000-0  46773-4 0  9993',\n  '2 27844  98.6891 167.0991 0010206  24.2885 335.8772 14.22040180722827'],\n ['CUBESAT XI-IV (CO-57)',\n  '1 27848U 03031J   17157.94019864  .00000049  00000-0  42130-4 0  9995',\n  '2 27848  98.6984 167.3507 0010288  33.1088 327.0731 14.21654454722714'],\n ['MOZHAYETS 4 (RS-22)',\n  '1 27939U 03042A   17157.95142003  .00000074  00000-0  21852-4 0  9997',\n  '2 27939  97.9376 303.0227 0011611 257.2398 214.8050 14.66567367731671'],\n ['CUBESAT XI-V (CO-58)',\n  '1 28895U 05043F   17157.91720929  .00000137  00000-0  35044-4 0  9995',\n  '2 28895  97.8636 320.6834 0017091 171.3248 188.8254 14.63397139618752'],\n ['CUTE-1.7+APD II (CO-65)',\n  '1 32785U 08021C   17157.48255156  .00000231  00000-0  30881-4 0  9993',\n  '2 32785  97.5670 182.2444 0012598 197.3295 162.7494 14.87883869493233'],\n ['DELFI-C3 (DO-64)',\n  '1 32789U 08021G   17157.91790762  .00001761  00000-0  12872-3 0  9990',\n  '2 32789  97.5594 216.3656 0014016 132.9125 227.3280 15.04840417495224'],\n ['SEEDS II (CO-66)',\n  '1 32791U 08021J   17157.50062011  .00000412  00000-0  47852-4 0  9996',\n  '2 32791  97.5639 186.5931 0013374 182.0203 178.0963 14.90214843493477'],\n ['YUBILEINY (RS-30)',\n  '1 32953U 08025A   17157.90074773  .00000009  00000-0 -43511-5 0  9994',\n  '2 32953  82.5043 246.0466 0017692 309.2996  50.6514 12.43076924410146'],\n ['PRISM (HITOMI)',\n  '1 33493U 09002B   17157.92778153 -.00000064  00000-0 -39021-7 0  9990',\n  '2 33493  98.1706  39.9301 0016340 112.7159 247.5797 14.95654614454245'],\n ['KKS-1 (KISEKI)',\n  '1 33499U 09002H   17157.90280026  .00000093  00000-0  21879-4 0  9990',\n  '2 33499  98.3309 322.9845 0010210  52.6343 307.5793 14.75187766449421'],\n ['SWISSCUBE',\n  '1 35932U 09051B   17157.89657760  .00000124  00000-0  39067-4 0  9992',\n  '2 35932  98.4941 296.2171 0006375 284.4757  75.5733 14.56011943408786'],\n ['BEESAT',\n  '1 35933U 09051C   17157.95247225  .00000104  00000-0  34528-4 0  9996',\n  '2 35933  98.4978 297.5789 0004695 302.1672  57.9069 14.56131754408850'],\n ['ITUPSAT 1',\n  '1 35935U 09051E   17157.93489976  .00000091  00000-0  31917-4 0  9991',\n  '2 35935  98.5089 297.8144 0006947 292.2852  67.7608 14.55325608408710'],\n ['XIWANG-1 (HOPE-1)',\n  '1 36122U 09072B   17157.77532718 -.00000030  00000-0  31426-4 0  9997',\n  '2 36122 100.1008 184.5681 0006759 257.8822 102.1535 13.16339795359258'],\n ['TISAT 1',\n  '1 36799U 10035E   17157.87193104  .00000393  00000-0  46366-4 0  9991',\n  '2 36799  98.0604 280.3902 0012438   7.9664 352.1748 14.90384598374046'],\n ['JUGNU',\n  '1 37839U 11058B   17157.35020652  .00000306  00000-0  21589-4 0  9997',\n  '2 37839  19.9599 156.1868 0019182  64.1962  70.0492 14.12584424292053'],\n ['SRMSAT',\n  '1 37841U 11058D   17157.46885962  .00000309  00000-0  24816-4 0  9994',\n  '2 37841  19.9705 196.9326 0011789 324.5654 172.4379 14.10575906291673'],\n ['M-CUBED & EXP-1 PRIME',\n  '1 37855U 11061F   17157.87731786  .00001121  00000-0  66491-4 0  9990',\n  '2 37855 101.7182  24.0750 0181114 111.9310 250.1261 15.03005730304772'],\n ['HORYU 2',\n  '1 38340U 12025D   17157.91402943  .00000218  00000-0  40277-4 0  9996',\n  '2 38340  98.3760 161.4735 0010920 331.0517  29.0084 14.75334522261369'],\n ['STRAND-1',\n  '1 39090U 13009E   17157.56291895  .00000048  00000-0  32170-4 0  9999',\n  '2 39090  98.5551   3.1010 0008767 339.3647  20.7183 14.34967897223954'],\n ['SOMP',\n  '1 39134U 13015E   17157.67463073  .00001016  00000-0  59309-4 0  9995',\n  '2 39134  64.8665 260.3932 0035246 271.0341  88.6747 15.17770685227503'],\n ['BEESAT-2',\n  '1 39136U 13015G   17157.74679967  .00000841  00000-0  54731-4 0  9995',\n  '2 39136  64.8701 270.7025 0031975 285.1503  74.6086 15.15060587227305'],\n ['CUBEBUG-1 (CAPITAN BETO)',\n  '1 39153U 13018D   17157.47894240  .00000167  00000-0  28925-4 0  9997',\n  '2 39153  97.9853 249.8323 0018524  84.2712 276.0612 14.80176007222003'],\n ['ZACUBE-1 (TSHEPISOSAT)',\n  '1 39417U 13066B   17157.75331750  .00000208  00000-0  32961-4 0  9997',\n  '2 39417  97.6303 200.5017 0057996 304.9928  54.5849 14.80703069191239'],\n ['TRITON-1',\n  '1 39427U 13066M   17157.96237530  .00000198  00000-0  39762-4 0  9996',\n  '2 39427  97.6376 174.0036 0114971  22.3128 338.3022 14.67452795189354'],\n ['GOMX 1',\n  '1 39430U 13066Q   17157.95277645  .00000217  00000-0  48021-4 0  9990',\n  '2 39430  97.6644 157.7693 0153510  75.5188 286.2990 14.58862624188250'],\n ['HUMSAT-D',\n  '1 39433U 13066T   17157.65401315  .00000594  00000-0  64603-4 0  9995',\n  '2 39433  97.6531 221.0870 0029729 251.0483 108.7513 14.91418770192444'],\n ['EAGLE 2',\n  '1 39436U 13066W   17157.51518678  .00017965  00000-0  50244-3 0  9999',\n  '2 39436  97.7081 262.9534 0012445 121.4069 238.8393 15.36656186195018'],\n ['CUBEBUG-2 (LO-74)',\n  '1 39440U 13066AA  17157.73308029  .00000187  00000-0  33388-4 0  9994',\n  '2 39440  97.6294 189.7411 0080053 335.3729  24.3667 14.75444914189355'],\n ['FUNCUBE-1 (AO-73)',\n  '1 39444U 13066AE  17157.94076422  .00000261  00000-0  39078-4 0  9995',\n  '2 39444  97.6318 201.7205 0057095 301.0888  58.4730 14.81434718189502'],\n ['UWE-3',\n  '1 39446U 13066AG  17157.51863816  .00000207  00000-0  34574-4 0  9997',\n  '2 39446  97.6286 194.6277 0069411 321.2445  38.3798 14.77977348189625'],\n ['SPROUT',\n  '1 39770U 14029E   17157.86288776  .00000842  00000-0  10196-3 0  9999',\n  '2 39770  97.8715 257.3336 0009430  11.8761 348.2664 14.86218298164603'],\n ['UNISAT-6',\n  '1 40012U 14033C   17157.61047148  .00000206  00000-0  38555-4 0  9998',\n  '2 40012  97.8587  41.6745 0058009 329.5021  30.2818 14.73613253159387'],\n ['DUCHIFAT-1',\n  '1 40021U 14033M   17157.82146968  .00000409  00000-0  48450-4 0  9991',\n  '2 40021  97.9196  70.9716 0012725 342.4572  17.6204 14.89877863161058'],\n ['FUNCUBE-3 (EO-79)',\n  '1 40025U 14033R   17157.92728976  .00000248  00000-0  32863-4 0  9993',\n  '2 40025  97.9138  69.0385 0012255 346.1120  13.9758 14.88410692160455'],\n ['CHUBUSAT-1',\n  '1 40300U 14070C   17157.82685807  .00000752  00000-0  37015-4 0  9998',\n  '2 40300  97.3958 237.9126 0021898 134.5399 321.3650 15.20835150143213'],\n ['NUDT-PHONESAT',\n  '1 40900U 15049B   17157.96374649  .00002086  00000-0  10182-3 0  9992',\n  '2 40900  97.4422 166.0321 0012213 260.1982  99.7874 15.19341020 94901'],\n ['ZDPS 2A',\n  '1 40901U 15049C   17157.93950065  .00000849  00000-0  47370-4 0  9997',\n  '2 40901  97.4577 165.4156 0012249 260.6939  99.2909 15.16197005 94787'],\n ['ZDPS 2B',\n  '1 40902U 15049D   17157.93383966  .00000819  00000-0  45975-4 0  9994',\n  '2 40902  97.4448 164.1077 0012319 257.3594 102.6262 15.16037574 94775'],\n ['XW-2A',\n  '1 40903U 15049E   17157.91127823  .00001814  00000-0  49574-4 0  9996',\n  '2 40903  97.4218 183.4886 0013417 306.9309  53.0706 15.38689198 96063'],\n ['KAITUO 1A',\n  '1 40904U 15049F   17157.86666734  .00000569  00000-0  34400-4 0  9998',\n  '2 40904  97.4536 163.7386 0013195 258.5746 192.3715 15.14497157 94682'],\n ['2015-049G',\n  '1 40905U 15049G   17157.95247391  .00000419  00000-0  26941-4 0  9998',\n  '2 40905  97.4504 162.5759 0014393 246.5886 113.3832 15.13526232 94658'],\n ['XW-2C',\n  '1 40906U 15049H   17157.93398036  .00000624  00000-0  37359-4 0  9993',\n  '2 40906  97.4544 163.6297 0013666 247.9612 112.0169 15.14514405 94688'],\n ['XW-2D',\n  '1 40907U 15049J   17157.91807779  .00000678  00000-0  40224-4 0  9995',\n  '2 40907  97.4514 163.3791 0013033 245.8354 114.1516 15.14616428 94687'],\n ['LILACSAT 2',\n  '1 40908U 15049K   17157.90482287  .00000379  00000-0  25015-4 0  9997',\n  '2 40908  97.4616 163.1522 0014643 244.0166 115.9557 15.13105422 94614'],\n ['XW-2F',\n  '1 40910U 15049M   17157.92625280  .00001023  00000-0  57443-4 0  9991',\n  '2 40910  97.4534 164.0542 0013867 243.3541 116.6271 15.15486256 94726'],\n ['XW-2B',\n  '1 40911U 15049N   17157.92391717  .00000665  00000-0  39551-4 0  9998',\n  '2 40911  97.4557 163.7557 0012936 246.1831 113.8045 15.14578989 94589'],\n ['KAITUO 1B',\n  '1 40912U 15049P   17157.92759491  .00001278  00000-0  66830-4 0  9997',\n  '2 40912  97.4511 165.8652 0014071 235.1118 185.7654 15.17582002 94732'],\n ['TIANWANG 1C (TW-1C)',\n  '1 40926U 15051B   17157.86740741  .00005846  00000-0  13637-3 0  9997',\n  '2 40926  97.2313 197.5088 0011189 196.8903 161.2575 15.42551440 95329'],\n ['TIANWANG 1B (TW-1B)',\n  '1 40927U 15051C   17157.88817682  .00005688  00000-0  13769-3 0  9999',\n  '2 40927  97.2395 197.5518 0010562 208.2943 276.4667 15.41453080 95280'],\n ['TIANWANG 1A (TW-1A)',\n  '1 40928U 15051D   17157.86595113  .00002785  00000-0  81514-4 0  9999',\n  '2 40928  97.2279 193.8678 0011055 230.0425 251.9585 15.36033874 95112'],\n ['LAPAN-A2 (IO-86)',\n  '1 40931U 15052B   17157.84235354  .00000736  00000-0  13584-4 0  9996',\n  '2 40931   6.0011 306.5067 0013102  94.6083 265.5537 14.76530561 91439'],\n ['LQSAT',\n  '1 40958U 15057A   17157.85457356  .00000020  00000-0  10940-4 0  9998',\n  '2 40958  97.9775 233.3540 0019648  98.4787 261.8640 14.72966793 89595'],\n ['CHUBUSAT-2',\n  '1 41338U 16012B   17157.43702983  .00000306  00000-0  17316-4 0  9997',\n  '2 41338  31.0021 180.5346 0013982 313.0940  46.8525 14.99737178 71372'],\n ['CHUBUSAT-3',\n  '1 41339U 16012C   17157.43326480  .00000301  00000-0  16800-4 0  9994',\n  '2 41339  31.0105 179.7207 0014024 320.1459  39.8148 14.99943086 71352'],\n ['OUFTI-1',\n  '1 41458U 16025C   17157.92652534  .00001077  00000-0  62179-4 0  9997',\n  '2 41458  98.1859 194.9171 0173945 324.2401  34.7278 15.03135743 61045'],\n ['E-ST@R-II',\n  '1 41459U 16025D   17157.87980266  .00001050  00000-0  60970-4 0  9996',\n  '2 41459  98.1884 194.8208 0174015 325.0636  33.9268 15.02995051 61025'],\n ['AAUSAT 4',\n  '1 41460U 16025E   17157.88327688  .00002108  00000-0  11758-3 0  9996',\n  '2 41460  98.1793 194.9209 0166353 323.3028  35.6891 15.03870501 61046'],\n ['NUSAT 1 (LO-87)',\n  '1 41557U 16033B   17157.92238609  .00001427  00000-0  56498-4 0  9995',\n  '2 41557  97.4634 237.4393 0015510  48.8257 311.4317 15.27013443 56869'],\n ['BEESAT-4',\n  '1 41619U 16040W   17157.59757047  .00001471  00000-0  69942-4 0  9994',\n  '2 41619  97.4632 220.0870 0013859 104.0791 256.1986 15.20710147 40987'],\n ['PRATHAM',\n  '1 41783U 16059A   17157.62711564  .00000075  00000-0  24017-4 0  9997',\n  '2 41783  98.1677 219.1101 0033425 191.6914 168.3515 14.62836960 37055'],\n ['ALSAT 1N',\n  '1 41789U 16059G   17157.89777685  .00000103  00000-0  28856-4 0  9995',\n  '2 41789  98.1677 219.8588 0028201 184.3767 175.7190 14.64046964 37104'],\n ['NAYIF-1 (EO-88)',\n  '1 42017U 17008BX  17157.92185663  .00001501  00000-0  67012-4 0  9998',\n  '2 42017  97.4960 219.3981 0004993 252.2569 107.8122 15.22933953 16921']]"},"exec_count":62}},"exec_count":62,"start":1497020153177,"input":"# itertools has lots of things that deal with looping\n# \"generators\" and \"iterators\" are really nice concepts that\n#can be used in place of most usage of using indexes in a loop\n#because usually we aren't actually interested in counting the lines\nfrom itertools import islice\ndata = []\nwith open('amateur.txt') as f:\n    #we don't know we've reached the end of the file\n    #until we actually reached it\n    while True:\n        #an iterator that returns the next N lines and stops\n        tripleline = islice(f, 3)\n        #loop over these N lines, removing trailing spaces and \\n\n        # this is called a \"list comprehension\"\n        # it is pretty much exactly the same as\n        #    tle = []\n        #    for line in tripleline:\n        #      tle.append(x.rstrip())\n        #\n        tle = [x.rstrip() for x in tripleline]\n        \n        #only accept complete data\n        #the end of the file *should* have len(tle)==0 but\n        #this also handles extra junk at the end\n        if len(tle) == 3:\n            data.append(tle)\n        else:\n            break\n\n# now, data is a list of 3-element lists of strings\ndata","state":"done","pos":2,"type":"cell","end":1497020153201,"id":"964637","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"[[[42893.04597967091,\n   42893.05479798677,\n   0.008818315858661663,\n   3.1217117066147058,\n   291.59949038617015]],\n [[42893.05319935742,\n   42893.060373780594,\n   0.007174423175456468,\n   36.77677451043472,\n   140.19885346989122]],\n [[42893.200041236596,\n   42893.208305896966,\n   0.008264660369604826,\n   110.20534131477669,\n   6.351135496440512]],\n [[42893.236751623626,\n   42893.23827426103,\n   0.0015226374016492628,\n   52.322442155734656,\n   35.297270158845336]],\n [[42893.001480840125,\n   42893.00565617905,\n   0.00417533892323263,\n   336.84520427870586,\n   289.4570786095906]],\n [[42893.000260694724,\n   42893.02093311292,\n   0.02067241819895571,\n   317.79375762678933,\n   102.70395628521595]],\n [[42893.020595452035,\n   42893.026550729955,\n   0.005955277920293156,\n   76.87955744853134,\n   12.92690054675711]],\n [[42893.19744923418,\n   42893.204248804745,\n   0.0067995705612702295,\n   92.33654191764784,\n   12.637146846692245]],\n [[42893.30944383264,\n   42893.31604054287,\n   0.006596710234589409,\n   190.456669458409,\n   70.48850846101539]],\n [[42893.293338440984,\n   42893.29616933119,\n   0.0028308902037679218,\n   109.38517219924155,\n   78.73860516701458]],\n [[42893.44041801992,\n   42893.44769636666,\n   0.0072783467403496616,\n   155.95612720586732,\n   57.29577951308232]],\n [[42893.01259100197,\n   42893.0235243415,\n   0.01093333953031106,\n   12.871590528631994,\n   195.95166592871098]],\n [[42893.010048930504,\n   42893.02098862843,\n   0.010939697924186476,\n   13.728191019426328,\n   193.57474643716822]],\n [[42893.29760299323,\n   42893.29975646243,\n   0.002153469198674429,\n   67.22686090590253,\n   93.63752219980601]],\n [[42893.35567918246,\n   42893.36065198053,\n   0.004972798073140439,\n   51.350618934963144,\n   114.79844545612433]],\n [[42893.02182368439,\n   42893.030425826386,\n   0.008602141999290325,\n   23.326760874203735,\n   167.05926906026173]],\n [[42893.1022829612,\n   42893.109725707225,\n   0.007442746027663816,\n   31.08127783704702,\n   152.83262705690714]],\n [[42893.03667259208,\n   42893.04527889375,\n   0.008606301664258353,\n   22.349562294555426,\n   169.3641710371959]],\n [[42893.03356734748,\n   42893.03961010536,\n   0.006042757886461914,\n   14.471342068106749,\n   59.855898338543184]],\n [[42893.04034976196,\n   42893.045260995736,\n   0.004911233772872947,\n   90.22508455838677,\n   21.44223825766364]],\n [[42893.392163663055,\n   42893.40011246341,\n   0.00794880035391543,\n   33.215162122447815,\n   149.122058488406]],\n [[42893.27773360546,\n   42893.27947426655,\n   0.0017406610932084732,\n   70.24845463244613,\n   90.96888532881198]],\n [[42893.3299415819,\n   42893.33898649347,\n   0.009044911574164871,\n   27.906086816448173,\n   158.87537737788745]],\n [[42893.31397048829,\n   42893.32196427185,\n   0.007993783554411493,\n   35.52310011846805,\n   143.10691579205087]],\n [[42893.04585839111,\n   42893.059663070904,\n   0.013804679794702679,\n   17.60486381212664,\n   186.8836472394136]],\n [[42893.27404502439,\n   42893.28162208278,\n   0.007577058393508196,\n   33.83690399731032,\n   148.00306859668282]],\n [[42893.516284335754,\n   42893.51879475713,\n   0.002510421378246974,\n   173.59974892643922,\n   148.2754155596479]],\n [[42893.637954668826,\n   42893.641984330854,\n   0.004029662028187886,\n   182.05328281686724,\n   141.35021845828027]],\n [[42893.04568077803,\n   42893.053536933,\n   0.007856154974433593,\n   141.864722948079,\n   351.84637607356154]],\n [[42893.06285994399,\n   42893.004692534305,\n   -0.05816740968293743,\n   350.8512448322474,\n   193.7538203368276]],\n [[42893.01812087458,\n   42893.028660168784,\n   0.01053929420595523,\n   166.73379688593226,\n   346.3959943989181]],\n [[42893.03699931169,\n   42893.04109489628,\n   0.004095584590686485,\n   351.8593261122279,\n   48.030945507756435]],\n [[42893.0460580875,\n   42893.04880538279,\n   0.002747295286098961,\n   354.30294923120505,\n   30.960998205763094]],\n [[42893.16571607018,\n   42893.17086589275,\n   0.0051498225730028935,\n   50.24115374203754,\n   119.34933219821212]],\n [[42893.03329833451,\n   42893.039946637145,\n   0.006648302638495807,\n   41.26832398410803,\n   130.15910376737614]],\n [[42893.051426389524,\n   42893.06116364076,\n   0.009737251239130273,\n   4.848551081872006,\n   211.22321759205082]],\n [[42893.05133747105,\n   42893.058433497055,\n   0.007096026005456224,\n   347.9520754163871,\n   249.02987193120214]],\n [[42893.12161431835,\n   42893.129897953484,\n   0.008283635135740042,\n   26.76462389480835,\n   159.79836816118797]],\n [[42893.2506705056,\n   42893.257936603,\n   0.007266097396495752,\n   25.22257208589457,\n   167.0316204545015]],\n [[42893.018512748524,\n   42893.02688552599,\n   0.008372777469048742,\n   31.620405158803635,\n   148.14771834292534]],\n [[42893.01881038242,\n   42893.02209960677,\n   0.0032892243543756194,\n   60.287928294113996,\n   101.41421849443161]],\n [[42893.00568707697,\n   42893.010808861596,\n   0.005121784626680892,\n   50.45400975733182,\n   114.98633029981305]],\n [[42893.20319352895,\n   42893.21041055616,\n   0.007217027210572269,\n   36.66842038944164,\n   141.60446541994483]],\n [[42893.0838819734,\n   42893.09244961752,\n   0.008567644123104401,\n   131.88263370253713,\n   0.9968975922665665]],\n [[42893.14054863854,\n   42893.14712528323,\n   0.006576644685992505,\n   107.28329759538602,\n   12.464829711669287]],\n [[42893.115411620085,\n   42893.11975435989,\n   0.004342739804997109,\n   83.2048248841509,\n   24.762051703748337]],\n [[42893.17335427963,\n   42893.18081453457,\n   0.00746025494299829,\n   26.625680771617365,\n   162.16818425599394]],\n [[42893.06552908653,\n   42893.008015571206,\n   -0.057513515326718334,\n   347.59870874948734,\n   186.9450779608087]],\n [[42893.04440609609,\n   42893.0519528886,\n   0.007546792512584943,\n   356.6121542273163,\n   227.54405023644466]],\n [[42893.03890999433,\n   42893.04653418696,\n   0.007624192629009485,\n   357.341591109917,\n   225.86226641749076]],\n [[42893.05811330552,\n   42893.06592228829,\n   0.007808982772985473,\n   10.761988419504238,\n   195.15866730569417]],\n [[42893.022731134275,\n   42893.030894235926,\n   0.00816310165100731,\n   3.3993565484981967,\n   212.23471396661634]],\n [[42893.0604016386,\n   42893.00270430502,\n   -0.05769733357738005,\n   346.0785545270526,\n   190.68124607831902]],\n [[42893.04066219805,\n   42893.04819055818,\n   0.007528360125434119,\n   356.20671419818433,\n   228.59539393462802]],\n [[42893.02464173022,\n   42893.03270673221,\n   0.008065001988143194,\n   2.2142438088635257,\n   214.91591838568317]],\n [[42893.01301943217,\n   42893.02135977286,\n   0.008340340689755976,\n   6.434553877434348,\n   205.33196086686135]],\n [[42893.0319023316,\n   42893.039779377774,\n   0.007877046176872682,\n   0.09958625918236848,\n   219.70689993747527]],\n [[42893.03051403111,\n   42893.03843763988,\n   0.007923608769488055,\n   0.36635312434822176,\n   219.162725105922]],\n [[42893.01995561398,\n   42893.028167173004,\n   0.008211559026676696,\n   6.540271118520981,\n   204.89678219408316]],\n [[42893.07571541927,\n   42893.083104554586,\n   0.0073891353167709894,\n   20.168131354794877,\n   175.11320956348732]],\n [[42893.07486633696,\n   42893.08228143856,\n   0.007415101601509377,\n   20.540699390998853,\n   174.32626248807512]],\n [[42893.0591185568,\n   42893.06657348187,\n   0.007454925071215257,\n   22.82034332838231,\n   169.41203700289932]],\n [],\n [[42893.14309660513,\n   42893.15108089342,\n   0.00798428829148179,\n   32.38375393063343,\n   149.47313021174466]],\n [[42893.60659374057,\n   42893.61335578101,\n   0.006762040437024552,\n   204.2341035804302,\n   109.7522129048597]],\n [[42893.60241363842,\n   42893.60908090085,\n   0.006667262430710252,\n   203.17015135303896,\n   110.1279416111021]],\n [[42893.04579187996,\n   42893.054623556025,\n   0.008831676066620275,\n   27.76133974000997,\n   158.865596546996]],\n [[42893.00170514369,\n   42893.00538863913,\n   0.0036834954444202594,\n   59.36648113356592,\n   104.76151662173645]],\n [[42893.00403986402,\n   42893.00814963788,\n   0.004109773857635446,\n   56.89202312558077,\n   108.23081558799605]],\n [[42893.14857683367,\n   42893.15444593546,\n   0.005869101791176945,\n   41.44975771412567,\n   136.25899545095277]],\n [[42893.094428995915,\n   42893.09967001914,\n   0.005241023223788943,\n   46.411091014007035,\n   127.75957634968061]],\n [[42893.067484899686,\n   42893.07012846861,\n   0.0026435689214849845,\n   64.61240109540505,\n   97.41402258436527]],\n [[42893.128236425735,\n   42893.137478002405,\n   0.009241576670319773,\n   22.381143381730272,\n   170.41234552760437]],\n [[42893.08760192698,\n   42893.09227109815,\n   0.0046691711686435156,\n   50.370374090945006,\n   121.39239204312469]]]"},"exec_count":65}},"exec_count":65,"start":1497020373984,"input":"vu = ['Valparaiso University', '41.4639', '-87.0439', 245.089]\nstart_time = '2017/6/8 12:00:00'\nnum_passes = 1\nduration = None\nsat_passes = []\n\nfor tle in data:\n    sat_passes.append(get_passes(vu, tle, start_time, num_passes=num_passes, duration=duration))\n    \nsat_passes","scrolled":true,"state":"done","pos":3,"type":"cell","end":1497020374399,"id":"2cef5a","kernel":"anaconda3"}